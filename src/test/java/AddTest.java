// Generated by Selenium IDE

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;

import java.util.*;

public class   AddTest {

  List<By> commands;
  private static final By ONE_BUTTON_BY = By.cssSelector("span:nth-child(9)");
  private static final By TWO_BUTTON_BY = By.cssSelector("span:nth-child(10)");
  private static final By THREE_BUTTON_BY = By.cssSelector("span:nth-child(11)");

  private static final By FOUR_BUTTON_BY = By.cssSelector("span:nth-child(5)");
  private static final By FIVE_BUTTON_BY = By.cssSelector("span:nth-child(6)");
  private static final By SIX_BUTTON_BY = By.cssSelector("span:nth-child(7)");

  private static final By SEVEN_BUTTON_BY = By.cssSelector("span:nth-child(1)");
  private static final By EIGHT_BUTTON_BY = By.cssSelector("span:nth-child(2)");
  private static final By NINE_BUTTON_BY = By.cssSelector("span:nth-child(3)");

  private static final By ZERO_BUTTON_BY = By.cssSelector("span:nth-child(13)");

  private static final By ADD_BUTTON_BY = By.cssSelector(".operator:nth-child(4)");
  private static final By SUBTRACT_BUTTON_BY = By.cssSelector(".operator:nth-child(8)");
  private static final By MULTIPLY_BUTTON_BY = By.cssSelector(".operator:nth-child(16)");
  private static final By DIVISION_BUTTON_BY = By.cssSelector(".operator:nth-child(12)");
  private static final By EQUAL_BUTTON_BY = By.cssSelector(".eval");
  private static final By CLEAR_BUTTON_BY = By.cssSelector(".clear");
  JavascriptExecutor js;
  @Before
  public void setUp() {

  }
  @After
  public void tearDown() {

  }
  @Test
  public void carryOutOperations_AddTwoNumbersThreeAndTwo_Five() {
    commands = new ArrayList();
    commands.add(THREE_BUTTON_BY);
    commands.add(ADD_BUTTON_BY);
    commands.add(TWO_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("5"));
  }

  @Test
  public void carryOutOperations_SubtractionTwoNumbersOneAndTwo_MinusOne() {
    commands = new ArrayList();
    commands.add(ONE_BUTTON_BY);
    commands.add(SUBTRACT_BUTTON_BY);
    commands.add(TWO_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("-1"));
  }

  @Test
  public void carryOutOperations_MultiplyTwoNumbersFourAndFive_Twenty() {
    commands = new ArrayList();
    commands.add(FOUR_BUTTON_BY);
    commands.add(MULTIPLY_BUTTON_BY);
    commands.add(FIVE_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("20"));
  }

  @Test
  public void carryOutOperations_DivisionThreeNumbersNineThreeAndTree_One() {
    commands = new ArrayList();
    commands.add(NINE_BUTTON_BY);
    commands.add(DIVISION_BUTTON_BY);
    commands.add(THREE_BUTTON_BY);
    commands.add(DIVISION_BUTTON_BY);
    commands.add(THREE_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("1"));
  }

  @Test
  public void carryOutOperations_DivisionByZero_Infinity() {
    commands = new ArrayList();
    commands.add(NINE_BUTTON_BY);
    commands.add(DIVISION_BUTTON_BY);
    commands.add(ZERO_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("Infinity"));
  }

  @Test
  public void carryOutOperations_MultiplyByToZero_Infinity() {
    commands = new ArrayList();
    commands.add(NINE_BUTTON_BY);
    commands.add(MULTIPLY_BUTTON_BY);
    commands.add(ZERO_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("0"));
  }

  @Test
  public void carryOutOperations_MultiplyBigNumbers_Infinity() {
    commands = new ArrayList();
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(MULTIPLY_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);
    commands.add(SIX_BUTTON_BY);
    commands.add(NINE_BUTTON_BY);

    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("6.758494031221303e+31"));
  }

  @Test
  public void carryOutOperations_AddNegative555Add888_333() {
    commands = new ArrayList();
    commands.add(SUBTRACT_BUTTON_BY);
    commands.add(FIVE_BUTTON_BY);
    commands.add(FIVE_BUTTON_BY);
    commands.add(FIVE_BUTTON_BY);
    commands.add(ADD_BUTTON_BY);
    commands.add(EIGHT_BUTTON_BY);
    commands.add(EIGHT_BUTTON_BY);
    commands.add(EIGHT_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is("333"));
  }

  @Test
  public void carryOutOperations_Clear_() {
    commands = new ArrayList();
    commands.add(SEVEN_BUTTON_BY);
    commands.add(CLEAR_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is(""));
  }
  @Test
  public void carryOutOperations_9Multiply7ClearEqual_() {
    commands = new ArrayList();
    commands.add(NINE_BUTTON_BY);
    commands.add(MULTIPLY_BUTTON_BY);
    commands.add(SEVEN_BUTTON_BY);
    commands.add(CLEAR_BUTTON_BY);
    commands.add(EQUAL_BUTTON_BY);
    CalculatorPage calculatorPage= new CalculatorPage();
    assertThat(calculatorPage.carryOutOperations(commands), is(""));
  }
}
